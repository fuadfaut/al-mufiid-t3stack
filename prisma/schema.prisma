// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum UserRole {
    ADMIN
    USTADZ
    SANTRI
}

enum ApprovalStatus {
    PENDING
    APPROVED
    REJECTED
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    role          UserRole  @default(SANTRI)
    approvalStatus ApprovalStatus @default(PENDING)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    // Relations
    accounts      Account[]
    sessions      Session[]
    student       Student?
    assessmentsCreated Assessment[] @relation("AssessmentCreator")
    assessmentsReceived Assessment[] @relation("AssessmentReceiver")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Student {
    id          String    @id @default(cuid())
    nis         String    @unique
    class       String
    jilid       String
    parentName  String
    phoneNumber String
    address     String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    // Relations
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String    @unique
}

model Assessment {
    id          String    @id @default(cuid())
    date        DateTime  @default(now())
    surah       String?
    jilid       String?
    notes       String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    // Relations
    createdBy   User      @relation("AssessmentCreator", fields: [createdById], references: [id])
    createdById String
    student     User      @relation("AssessmentReceiver", fields: [studentId], references: [id])
    studentId   String

    // Assessment components
    fashahahAssessment FashahahAssessment?
    tajwidAssessment   TajwidAssessment?
    tartilAssessment   TartilAssessment?
    adabAssessment     AdabAssessment?
    voiceAssessment    VoiceAssessment?

    // Final score
    finalScore   Float?
}

model FashahahAssessment {
    id                String    @id @default(cuid())
    makharijulHuruf   Float
    sifatulHuruf      Float
    harakat           Float
    madQashr          Float
    score             Float     // Weighted score for Fashahah

    // Relations
    assessment        Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
    assessmentId      String    @unique
}

model TajwidAssessment {
    id                String    @id @default(cuid())
    hukumNunMati      Float
    hukumMimMati      Float
    mad               Float
    waqafIbtida       Float
    tafkhimTarqiq     Float
    score             Float     // Weighted score for Tajwid

    // Relations
    assessment        Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
    assessmentId      String    @unique
}

model TartilAssessment {
    id                String    @id @default(cuid())
    tempo             Float
    calmness          Float
    fluency           Float
    score             Float     // Weighted score for Tartil

    // Relations
    assessment        Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
    assessmentId      String    @unique
}

model AdabAssessment {
    id                String    @id @default(cuid())
    attitude          Float
    score             Float     // Weighted score for Adab

    // Relations
    assessment        Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
    assessmentId      String    @unique
}

model VoiceAssessment {
    id                String    @id @default(cuid())
    voice             Float
    tone              Float
    score             Float     // Weighted score for Voice

    // Relations
    assessment        Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
    assessmentId      String    @unique
}
